#!/usr/bin/env python

import subprocess
import sys
# check if root
isroot = str(subprocess.Popen('whoami', stdout=subprocess.PIPE,text=True).stdout.read()).strip()
if isroot!='root':
    print('Root Permission needed, exiting ...')
    sys.exit()

from tracemalloc import start
import docker
from prettytable import PrettyTable
import argparse


#name&ID
containers = {
    'openvas':'f1dc67da6524',
    'metasploitable':'4b76dc542795',
}

client = docker.from_env()

x = PrettyTable()
x.field_names = ["ID", "NAME", "Network","IP","STATUS"]


def start_all():
    for NAME,cont_id in containers.items():

        container = client.containers.get(cont_id)
        print(f'Starting Container : {NAME}')
        container.start()
        ID = cont_id
        network_name = list(container.attrs.get('NetworkSettings')["Networks"].keys())[0]
        IPAddress = container.attrs.get('NetworkSettings')["Networks"][network_name]["IPAMConfig"]['IPv4Address']
        status = 'running'
        x.add_row([ID, NAME, network_name,IPAddress,status])

    # Display table
    print(x)

def stop_all():
    for NAME,cont_id in containers.items():
        container = client.containers.get(cont_id)
        container.stop()
        container.wait()
        print(f'Stopping Container : {NAME}')
        ID = cont_id
        network_name = list(container.attrs.get('NetworkSettings')["Networks"].keys())[0]
        IPAddress = container.attrs.get('NetworkSettings')["Networks"][network_name]["IPAMConfig"]['IPv4Address']
        status = 'exited'
        x.add_row([ID, NAME, network_name,IPAddress,status])
    print(x)

def restart_all():
    for NAME,cont_id in containers.items():
        container = client.containers.get(cont_id)
        container.restart()
        print(f'restating Container : {NAME}')
        ID = cont_id
        network_name = list(container.attrs.get('NetworkSettings')["Networks"].keys())[0]
        IPAddress = container.attrs.get('NetworkSettings')["Networks"][network_name]["IPAMConfig"]['IPv4Address']
        status = 'running'
        x.add_row([ID, NAME, network_name,IPAddress,status])
    print(x)

def list_all():
    for NAME,cont_id in containers.items():
        container = client.containers.get(cont_id)
        ID = cont_id
        network_name = list(container.attrs.get('NetworkSettings')["Networks"].keys())[0]
        IPAddress = container.attrs.get('NetworkSettings')["Networks"][network_name]["IPAMConfig"]['IPv4Address']
        status = container.attrs.get('State')['Status']
        x.add_row([ID, NAME, network_name,IPAddress,status])
    print(x)

parser = argparse.ArgumentParser(description='OPLEX Docker Pentest Env Manager')
parser.add_argument('-s','--start',action='store_true',help='start all container')
parser.add_argument('-r','--restart',action='store_true',help='restart all container')
parser.add_argument('-p','--stop',action='store_true',help='stop all container')
parser.add_argument('-l','--list',action='store_true',help='list all container')

args = parser.parse_args()

if args.start:
    start_all()

if args.stop:
    stop_all()

if args.restart:
    restart_all()

if args.list:
    list_all()
